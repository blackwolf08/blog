{"version":3,"sources":["routes/posts/2019-02-02-howto/document.mdx"],"names":["readingTime","text","minutes","time","words","layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","C_Users_sunny_Desktop_Projects_blog_template_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","className","styles","id","parentName","data-language","data-highlighted-line-numbers","dangerouslySetInnerHTML","__html","isMDXComponent","tableOfContents","arguments","length","undefined","level","title","children","frontMatter"],"mappings":"oTAGaA,EAAc,CAACC,KAAO,aAAaC,QAAU,KAAKC,KAAO,OAAOC,MAAQ,KAS/EC,EAAc,GAGdC,EAAY,UACH,SAASC,EAATC,GAGZ,IAFDC,EAECD,EAFDC,WACGC,EACFC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,gBACD,OAAOG,OAAAE,EAAA,EAAAF,CAACL,EAADK,OAAAG,OAAA,GAAeT,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYM,QAAQ,cAE5EJ,OAAAE,EAAA,EAAAF,CAAA,OAAKK,UAAWC,IAAM,SACpBN,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNO,GAAM,sBADR,sBAGAP,OAAAE,EAAA,EAAAF,CAAA,yLACAA,OAAAE,EAAA,EAAAF,CAAA,ucACAA,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNO,GAAM,wDADR,sEAGAP,OAAAE,EAAA,EAAAF,CAAA,0QACAA,OAAAE,EAAA,EAAAF,CAAA,ymBAEAA,OAAAE,EAAA,EAAAF,CAAA,qeACAA,OAAAE,EAAA,EAAAF,CAAA,mFACAA,OAAAE,EAAA,EAAAF,CAAA,udAEAA,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMK,WAAW,OAAU,CAC5BH,UAAa,eACbI,gBAAiB,MACjBC,gCAAiC,GACjCC,wBAA2B,CACzBC,OAAU,6BAGhBZ,OAAAE,EAAA,EAAAF,CAAA,mLACAA,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMK,WAAW,OAAU,CAC5BH,UAAa,eACbI,gBAAiB,MACjBC,gCAAiC,GACjCC,wBAA2B,CACzBC,OAAU,sTAGhBZ,OAAAE,EAAA,EAAAF,CAAA,sNACAA,OAAAE,EAAA,EAAAF,CAAA,qqBAEAA,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNO,GAAM,qCADR,mDAGAP,OAAAE,EAAA,EAAAF,CAAA,kNACAA,OAAAE,EAAA,EAAAF,CAAA,gUAEAA,OAAAE,EAAA,EAAAF,CAAA,mNACAA,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNO,GAAM,wDADR,sEAGAP,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNO,GAAM,eADR,qBAGAP,OAAAE,EAAA,EAAAF,CAAA,uFACAA,OAAAE,EAAA,EAAAF,CAAA,2BAKNJ,EAAWiB,gBAAiB,EACrB,IAAMC,EAAkB,WAAAC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,SAAmB,CAChD,CACER,GAAI,qBACJW,MAAO,EACPC,MAAO,qBACPC,SAAU,MAMDC,EAAc","file":"static/js/7.94af9385.chunk.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\nexport const readingTime = {\"text\":\"5 min read\",\"minutes\":4.26,\"time\":255600,\"words\":852}\n/* @jsx mdx */\nimport styles from './document.module.css'\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <div className={styles[\"Welcome\"]}>\n      <h2 {...{\n        \"id\": \"how-to-get-started\"\n      }}>{`How to get started`}</h2>\n      <p>{`Hey everyone! I hope everything’s going great! Today we’re going to discuss the “Right Way” to begin your journey in the domain of Computer Programming.`}</p>\n      <p>{`First of all, let’s make it clear - There’s no hard written way of succeeding in anything. I just happens with sheer willpower, perseverance and hard work. Also there is NO shortcut. You have to take every step on the ‘ladder of success’ - there’s no skipping. Aye, you may learn from other people’s mistakes and experiences, but make sure that you have your own experiences too, and also make your own mistakes.`}</p>\n      <h4 {...{\n        \"id\": \"failure-is-not-in-falling-but-in-not-rising-up-again\"\n      }}>{`“Failure is not in falling, but in not rising up again”.`}</h4>\n      <p>{`The way, or workflow which I’ll be discussing here is the one I found out to be really effective. Undoubtedly, there are many other ways, some more effective, and some less. But everything is good if it helps you further yourself towards your goal.`}</p>\n      <p>{`Choosing your first language\nChoosing your first language wisely is really important. Because you will do a lot of preliminary and basic stuff using your first language. A good tip for selecting your first programming language would be to select a compiled language like C, C++, Java, etc. Most of compiled languages, for e.g. C, are closer to the system. C doesn’t do a lot of stuff for us; for example, implementing dynamic arrays ( arrays with variable size ) in C is not so easy. But in interpreted languages, like Python, dynamic arrays are a part of the language ( called ‘lists’ ).`}</p>\n      <p>{`The language which I would recommend for first-timers would be C. It has a flatter learning curve than Java and is similar to C++, but helps you in learning many of the concepts ( not including Object Oriented Programming ). You can also use C for Competitive Programming, as it is comparatively faster than other languages. Also, as it is a language that is ‘closer to the computer system and hardware’, we are also able to understand the working of the system.`}</p>\n      <p>{`After you are well comfortable with C, you may move on to C++ or Java.`}</p>\n      <p>{`Good Logic\nThe truth is, learning a programming language is really simple. It is simply a construct of words and symbols, which when placed correctly will create a good output. Here, “correct” is a subjective matter. With good Logic, you can create beautiful poetries out of your code. A simple example would be swapping 2 numbers stored in a and b. The simplest method one can think of is to create a temporary variable c and use it as following:`}</p>\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-cmd\",\n          \"data-language\": \"cmd\",\n          \"data-highlighted-line-numbers\": \"\",\n          \"dangerouslySetInnerHTML\": {\n            \"__html\": \"c = a\\na = b\\nb = c\\n\"\n          }\n        }}></code></pre>\n      <p>{`But what if we can do this, but without a 3rd variable? There are some methods, like in the following trick, we use addition and subtraction to manipulate the values.`}</p>\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-cmd\",\n          \"data-language\": \"cmd\",\n          \"data-highlighted-line-numbers\": \"\",\n          \"dangerouslySetInnerHTML\": {\n            \"__html\": \"a = a + b # a gets value &#39;a+b&#39;\\nb = a - b # b gets value &#39;a+b-b&#39;, i.e. &#39;a&#39;\\na = a - b # a gets value &#39;a+b-a&#39;, i.e. &#39;b&#39;\\n# So, in the end, the values are swapped.\\n# To get a better understanding of this, use a pen and paper, and\\n# try to work it out yourself.\\n\"\n          }\n        }}></code></pre>\n      <p>{`Similarly, in other operations, you can write better code with better Logic. So first step would be to improve your logic, and train your brain to approach a problem from a technological point of view.`}</p>\n      <p>{`How to improve Logic?\nHere comes in Competitive Programming ( or Sport Programming ). Competitive programming has a large community, and is still growing at a huge rate. There is an ocean of questions, problems and competitions available on the internet now. There are various sites for the same, like Hackerrank, Codechef, etc. You can solve some problems without using advanced concepts, but some problems do require them. You also need to practise Data Structures and Algorithms. Competitive Programming ‘forces’ you to think of the most optimal solution, and before long, your brain will be trained to think of an optimal solution wherever possible.`}</p>\n      <h4 {...{\n        \"id\": \"with-great-logic-comes-great-code\"\n      }}>{`“With great Logic, comes great Code.”`}</h4>\n      <p>{`A good way to slowly improve your thinking, is to solve atleast 1–2 problems everyday. After 2–3 months, you will have a greater understanding of the problems, and the solving strategies.`}</p>\n      <p>{`Moving further\nBy the time you decide to move further, you should have developed a good logic, and would be proficient with 2–3 languages. From this point on, it will be a cakewalk. Learning a new language will be really easy. Now, the important part is - “What you want to do in your life?”`}</p>\n      <p>{`Computer Programming expands into a lot of huge fields further, like Web Development, App Development, Machine Learning, AI, Computer Vision, etc. It’s upto you to find out what you love to do.`}</p>\n      <h4 {...{\n        \"id\": \"the-only-way-to-do-great-work-is-to-love-what-you-do\"\n      }}>{`“The only way to do great work, is to love what you do.”`}</h4>\n      <h4 {...{\n        \"id\": \"-steve-jobs\"\n      }}>{`— Steve Jobs`}</h4>\n      <p>{`I’ll wrap up this post with this now, thank you for giving your time!`}</p>\n      <p>{`Adios Folks!`}</p>\n    </div>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\nexport const tableOfContents = (components={}) => [\n  {\n    id: \"how-to-get-started\",\n    level: 2,\n    title: \"How to get started\",\n    children: [\n        \n      ]\n  }\n]\n\nexport const frontMatter = {}\n\n"],"sourceRoot":""}